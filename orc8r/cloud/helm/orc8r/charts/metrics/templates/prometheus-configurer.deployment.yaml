{{/*
Copyright 2020 The Magma Authors.

This source code is licensed under the BSD-style license found in the
LICENSE file in the root directory of this source tree.

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}
{{- if .Values.prometheusConfigurer.create }}
{{- $serviceName := print .Release.Name "-prometheus-configurer" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $serviceName }}
  labels:
    app.kubernetes.io/component: prometheus-configurer
{{ include "metrics.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.prometheusConfigurer.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/component: prometheus-configurer
{{ include "selector-labels" . | indent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: prometheus-configurer
{{ include "selector-labels" . | indent 8 }}
    spec:
      {{- with .Values.prometheusConfigurer.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.prometheusConfigurer.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.prometheusConfigurer.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | trimSuffix "\n" | indent 8 }}
      {{- end }}

      volumes:
  {{ if .Values.thanos.enabled }}
  {{ if .Values.thanos.thanosRule.enabled }}
        - name: thanos-data
          emptyDir: {}
        - name: thanos-objstore-config
          configMap:
            name: thanos-objstore-config
        {{ if .Values.thanos.ruler.certSecretName }}
        - name: {{ .Values.thanos.ruler.certSecretName }}
          secret:
            defaultMode: 420
            secretName: {{ .Values.thanos.ruler.certSecretName }}
        {{- end }}
  {{- end }}
  {{- end }}
        - name: "prometheus-config"
{{ toYaml .Values.metrics.volumes.prometheusConfig.volumeSpec | indent 10 }}

      containers:
        - name: "prometheus-configurer"
          image: {{ required "prometheusConfigurer.image.repository must be provided" .Values.prometheusConfigurer.image.repository }}:{{ .Values.prometheusConfigurer.image.tag }}
          imagePullPolicy: {{ .Values.prometheusConfigurer.image.pullPolicy }}
          ports:
            - containerPort: 9100
          volumeMounts:
            - name: "prometheus-config"
              mountPath: /etc/configs
          args:
            - "-port={{ .Values.prometheusConfigurer.prometheusConfigurerPort }}"
            - "-rules-dir={{ .Values.prometheusConfigurer.rulesDir }}"
            - "-prometheusURL={{ .Values.prometheusConfigurer.prometheusURL }}"
            - "-multitenant-label=networkID"
            - "-restrict-queries"
          resources:
{{ toYaml .Values.prometheusConfigurer.resources | indent 12 }}
        {{ if .Values.thanos.enabled }}
        {{ if .Values.thanos.thanosRule.enabled }}
        - name: thanos-rule
          image: "{{ .Values.thanos.image.repository }}:{{ .Values.thanos.image.tag }}"
          imagePullPolicy: {{ .Values.thanos.image.pullPolicy }}
          resources: {{ toYaml .Values.thanos.ruler.resources | nindent 12 }}
          {{- with .Values.thanos.ruler.extraEnv }}
          env: {{ toYaml . | nindent 10 }}
          {{- end }}
          args:
            - "rule"
            - "--data-dir=/var/thanos/store"
            - "--log.level={{ .Values.thanos.ruler.logLevel }}"
            - "--http-address=0.0.0.0:{{ .Values.thanos.ruler.service.http.port }}"
            - "--grpc-address=0.0.0.0:{{ .Values.thanos.ruler.service.grpc.port }}"
            - "--objstore.config-file=/etc/thanos/objstore.yaml"
            - "--rule-file={{ .Values.thanos.ruler.ruleFile }}"
            {{- range $key, $val := .Values.thanos.ruler.ruleLabels }}
            - '--label={{ $key }}={{ $val | quote }}'
            {{- end }}
            {{- if .Values.thanos.ruler.resendDelay }}
            - "--resend-delay={{ .Values.thanos.ruler.resendDelay }}"
            {{- end }}
            {{- if .Values.thanos.ruler.evalInterval }}
            - "--eval-interval={{ .Values.thanos.ruler.evalInterval }}"
            {{- end }}
            {{- if .Values.thanos.ruler.tsdbBlockDuration }}
            - "--tsdb.block-duration={{ .Values.thanos.ruler.tsdbBlockDuration }}"
            {{- end }}
            {{- if .Values.thanos.ruler.tsdbRetention }}
            - "--tsdb.retention={{ .Values.thanos.ruler.tsdbRetention }}"
            {{- end }}
            {{- if .Values.thanos.ruler.webRoutePrefix }}
            - "--web.route-prefix={{ .Values.thanos.ruler.webRoutePrefix }}"
            {{- end }}
            {{- if .Values.thanos.ruler.webExternalPrefix }}
            - "--web.external-prefix={{ .Values.thanos.ruler.webExternalPrefix }}"
            {{- end }}
            {{- if .Values.thanos.ruler.webPrefixHeader }}
            - "--web.prefix-header={{ .Values.thanos.ruler.webPrefixHeader }}"
            {{- end }}
            {{- if .Values.thanos.ruler.dnsDiscovery.enabled }}
            - "--query=dnssrv+_http._tcp.orc8r-thanos-query.{{ .Release.Namespace }}.svc.cluster.local"
            {{- end  }}
            {{- range .Values.thanos.ruler.alertmanagers }}
            - "--alertmanagers.url={{ . }}"
            {{- end  }}
            {{- if .Values.thanos.ruler.alertmanagersSendTimeout }}
            - "--alertmanagers.send-timeout={{ .Values.thanos.ruler.alertmanagersSendTimeout }}"
            {{- end }}
            {{- if .Values.thanos.ruler.alertQueryUrl }}
            - "--alert.query-url={{ .Values.thanos.ruler.alertQueryUrl }}"
            {{- end }}
            {{- range .Values.thanos.ruler.alertLabelDrop }}
            - "--alert.label-drop={{ . }}"
            {{- end  }}
            {{- if .Values.thanos.ruler.extraArgs }}
            {{- toYaml .Values.thanos.ruler.extraArgs | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.thanos.ruler.service.http.port }}
            - name: grpc
              containerPort: {{ .Values.thanos.ruler.service.grpc.port }}
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/rules
              readOnly: true
            - name: thanos-objstore-config
              mountPath: /etc/thanos
              readOnly: true
            - name: thanos-data
              mountPath: /var/thanos/store
            {{- if .Values.thanos.ruler.certSecretName }}
            - mountPath: /etc/certs
              name: {{ .Values.thanos.ruler.certSecretName }}
              readOnly: true
            {{- end }}
        {{- end }}
        {{- end }}
{{- end }}
